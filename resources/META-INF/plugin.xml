<idea-plugin>
    <id>de.caluga.intellij.plugin.propertyEnums</id>
    <name>Fields / Properties to Enumeration Generator</name>
    <version>1.3</version>
    <vendor email="morphium-discuss@googlegroups.com" url="https://github.com/sboesebeck/intelliJGenPropertyEnumsPlugin">
        Stephan Bösebeck
    </vendor>

    <resource-bundle>de.caluga.intellij.plugin.gpe.Resources</resource-bundle>

    <description><![CDATA[

    <p>This is related to the project <a href="https://github.com/sboesebeck/morphium">morphium</a> the caching mongodb POJO Object Mapper
    and messaging system. When querying mongodb, you usually need to define the field you are looking for as string - which
    kind of breaks the whole abstraction.</p>
    <p>with <a href="https://github.com/sboesebeck/morphium">morphium</a> it is possible to just use the java names (properties of POJOs) when accessing mongo. But even that is
      just a String, which causes problems with migration etc.</p>
    <p>Using enums avoids most of those problems. This plugin will generate an Enum <i>Fields</i> containing one entry
      for each property of the POJO at the end of the class. Just use "ALT + INSERT" (or "CMD-N"
       depending on your shortcut settings for the Generate Dialog) and select "Generate Property Enums"</p>

      <p>
      Author is Stephan Bösebeck (sboesebeck)</p>

      <p>special thanks to Daniel Merwin (Free Universe Games) who helped with previous versions</p>

      <h2>Example:</h2>
<pre>

@Entity
public class Person {
    @Id
    private ObjectId identifier;
    private String firstName;
    private String lastName;
    //getter and Setter here

    //generated fields
    public enum Fields {firstName, identifier, lastName}
}
      </pre>

When querying mongo with morphium you would use it like this:

<pre>
   Query<Person> p=morphium.createQuery(Person.class);
        p=p.f(Person.Fields.firstName).eq("John");
        p=p.f(Person.Fields.lastName).eq("Doe");
        List<Person> lst=p.asList();
      </pre>

this also works, when the name of the field in Mongo is changed:
<pre>

@Entity
public class Person {
    @Id
    private ObjectId identifier;
    private String firstName;
    @Property(fieldName="surname")
    private String lastName;
    //getter and Setter here

    //generated fields
    public enum Fields {firstName, identifier, lastName}
}
</pre>

now, in MongoDB each <em>Person</em> will have a field called <em>surname</em> containing the lastName. When creating a query for
mongodb directly, you need to define how it is called in the database. With morphium you can just use the enum. The
query from above will work in both cases.
<br>
<em>Attention:</em> migration of data is not part of morphium. If you rename an already existing field, this will likely cause
problems
<br>
<h2>updating / refactoring</h2>

To update your fields, whenever you change property names, you should just remove the <em>Fields</em> enum from your entity and
re-generate it using the plugin. This way you will get compiler errors, for every place you used a field name that was
renamed.

See <a href="https://github.com/sboesebeck/morphium">morphium github</a> or the project page <a href="https://caluge.de">caluga.de</a> for more information.
Latest Morphium Documentation can be found <a href="https://github.com/sboesebeck/morphium/blob/master/Morphium%20Documentation.md">here</a>

    ]]></description>

    <change-notes><![CDATA[
      - 08/20/2016 Update to current IDE and prepared for Jetbrains Upload.<br>
      - 09/02/2021 switch to jdk11, prepare for upload to Jetbrains Plugin repository. needed to change Plugin ID<br>
      - 09/02/2021 making the result enum sorted alphabetically<br>
      - 10/02/2021 adding a bit more documentation<br>
    ]]>
    </change-notes>

    <depends>com.intellij.modules.java</depends>
    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
    <idea-version since-build="203"/>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <!-- uncomment to enable plugin in all products
    <depends>com.intellij.modules.lang</depends>
    -->
    <application-components>
        <!-- Add your application components here -->
        <component>
            <implementation-class>de.caluga.intellij.plugin.gpe.PsiHelper</implementation-class>
        </component>
    </application-components>

    <actions>
        <!-- Add your actions here -->
        <action id="GeneratePropertyEnums" class="de.caluga.intellij.plugin.gpe.GeneratePropertyEnums">
            <add-to-group group-id="GenerateGroup" anchor="last"/>
        </action>
    </actions>

</idea-plugin>